// Mocks generated by Mockito 5.1.0 from annotations
// in bicycle_trip_planner/test/widgets/routePlanning/recent_route_card_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i10;
import 'dart:ui' as _i17;

import 'package:bicycle_trip_planner/bloc/application_bloc.dart' as _i15;
import 'package:bicycle_trip_planner/managers/MarkerManager.dart' as _i14;
import 'package:bicycle_trip_planner/managers/RouteManager.dart' as _i12;
import 'package:bicycle_trip_planner/managers/UserSettings.dart' as _i8;
import 'package:bicycle_trip_planner/models/bounds.dart' as _i13;
import 'package:bicycle_trip_planner/models/distance_types.dart' as _i11;
import 'package:bicycle_trip_planner/models/pathway.dart' as _i2;
import 'package:bicycle_trip_planner/models/place.dart' as _i9;
import 'package:bicycle_trip_planner/models/place_search.dart' as _i16;
import 'package:bicycle_trip_planner/models/route.dart' as _i3;
import 'package:bicycle_trip_planner/models/station.dart' as _i7;
import 'package:bicycle_trip_planner/models/stop.dart' as _i4;
import 'package:flutter/cupertino.dart' as _i6;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakePathway_0 extends _i1.Fake implements _i2.Pathway {}

class _FakeRoute_1 extends _i1.Fake implements _i3.Route {}

class _FakeStop_2 extends _i1.Fake implements _i4.Stop {}

class _FakeMarker_3 extends _i1.Fake implements _i5.Marker {}

class _FakeWidget_4 extends _i1.Fake implements _i6.Widget {
  @override
  String toString({_i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStation_5 extends _i1.Fake implements _i7.Station {}

/// A class which mocks [UserSettings].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserSettings extends _i1.Mock implements _i8.UserSettings {
  MockUserSettings() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic savePlace(_i9.Place? place) =>
      super.noSuchMethod(Invocation.method(#savePlace, [place]));
  @override
  dynamic saveRoute(_i9.Place? origin, _i9.Place? destination,
          List<_i9.Place>? intermediates) =>
      super.noSuchMethod(
          Invocation.method(#saveRoute, [origin, destination, intermediates]));
  @override
  _i10.Future<int> getNumberOfRoutes() =>
      (super.noSuchMethod(Invocation.method(#getNumberOfRoutes, []),
          returnValue: Future<int>.value(0)) as _i10.Future<int>);
  @override
  _i10.Future<_i2.Pathway> getRecentRoute(int? index) =>
      (super.noSuchMethod(Invocation.method(#getRecentRoute, [index]),
              returnValue: Future<_i2.Pathway>.value(_FakePathway_0()))
          as _i10.Future<_i2.Pathway>);
  @override
  _i10.Future<_i11.DistanceType> distanceUnit() => (super.noSuchMethod(
          Invocation.method(#distanceUnit, []),
          returnValue: Future<_i11.DistanceType>.value(_i11.DistanceType.miles))
      as _i10.Future<_i11.DistanceType>);
  @override
  _i10.Future<double> nearbyStationsRange() =>
      (super.noSuchMethod(Invocation.method(#nearbyStationsRange, []),
          returnValue: Future<double>.value(0.0)) as _i10.Future<double>);
}

/// A class which mocks [RouteManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouteManager extends _i1.Mock implements _i12.RouteManager {
  MockRouteManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void moveCameraTo(_i3.Route? route,
          [_i13.Bounds? bounds = const _i13.Bounds.boundsNotFound()]) =>
      super.noSuchMethod(Invocation.method(#moveCameraTo, [route, bounds]),
          returnValueForMissingStub: null);
  @override
  dynamic setRouteMarker(_i5.LatLng? pos, [double? color = 0.0]) =>
      super.noSuchMethod(Invocation.method(#setRouteMarker, [pos, color]));
  @override
  void setRoutes(_i3.Route? startWalk, _i3.Route? bike, _i3.Route? endWalk) =>
      super.noSuchMethod(
          Invocation.method(#setRoutes, [startWalk, bike, endWalk]),
          returnValueForMissingStub: null);
  @override
  void showCurrentWalkingRoute([bool? relocateMap = true]) => super
      .noSuchMethod(Invocation.method(#showCurrentWalkingRoute, [relocateMap]),
          returnValueForMissingStub: null);
  @override
  void showCurrentRoute([bool? relocateMap = true]) =>
      super.noSuchMethod(Invocation.method(#showCurrentRoute, [relocateMap]),
          returnValueForMissingStub: null);
  @override
  void showBikeRoute([dynamic relocateMap = true]) =>
      super.noSuchMethod(Invocation.method(#showBikeRoute, [relocateMap]),
          returnValueForMissingStub: null);
  @override
  void setDirectionsData(_i3.Route? route) =>
      super.noSuchMethod(Invocation.method(#setDirectionsData, [route]),
          returnValueForMissingStub: null);
  @override
  void showAllRoutes([bool? relocateMap = true]) =>
      super.noSuchMethod(Invocation.method(#showAllRoutes, [relocateMap]),
          returnValueForMissingStub: null);
  @override
  void setLoading(bool? isLoading) =>
      super.noSuchMethod(Invocation.method(#setLoading, [isLoading]),
          returnValueForMissingStub: null);
  @override
  bool ifLoading() =>
      (super.noSuchMethod(Invocation.method(#ifLoading, []), returnValue: false)
          as bool);
  @override
  void setCurrentRoute(_i3.Route? route, [dynamic relocateMap = true]) => super
      .noSuchMethod(Invocation.method(#setCurrentRoute, [route, relocateMap]),
          returnValueForMissingStub: null);
  @override
  _i3.Route getCurrentRoute() =>
      (super.noSuchMethod(Invocation.method(#getCurrentRoute, []),
          returnValue: _FakeRoute_1()) as _i3.Route);
  @override
  bool ifRouteSet() => (super.noSuchMethod(Invocation.method(#ifRouteSet, []),
      returnValue: false) as bool);
  @override
  int getGroupSize() =>
      (super.noSuchMethod(Invocation.method(#getGroupSize, []), returnValue: 0)
          as int);
  @override
  void setGroupSize(int? size) =>
      super.noSuchMethod(Invocation.method(#setGroupSize, [size]),
          returnValueForMissingStub: null);
  @override
  bool ifWalkToFirstWaypoint() =>
      (super.noSuchMethod(Invocation.method(#ifWalkToFirstWaypoint, []),
          returnValue: false) as bool);
  @override
  void toggleWalkToFirstWaypoint() =>
      super.noSuchMethod(Invocation.method(#toggleWalkToFirstWaypoint, []),
          returnValueForMissingStub: null);
  @override
  void setWalkToFirstWaypoint(bool? ifWalk) =>
      super.noSuchMethod(Invocation.method(#setWalkToFirstWaypoint, [ifWalk]),
          returnValueForMissingStub: null);
  @override
  bool ifStartFromCurrentLocation() =>
      (super.noSuchMethod(Invocation.method(#ifStartFromCurrentLocation, []),
          returnValue: false) as bool);
  @override
  void toggleStartFromCurrentLocation() =>
      super.noSuchMethod(Invocation.method(#toggleStartFromCurrentLocation, []),
          returnValueForMissingStub: null);
  @override
  void setStartFromCurrentLocation(bool? value) => super.noSuchMethod(
      Invocation.method(#setStartFromCurrentLocation, [value]),
      returnValueForMissingStub: null);
  @override
  void setOptimised(bool? optimised) =>
      super.noSuchMethod(Invocation.method(#setOptimised, [optimised]),
          returnValueForMissingStub: null);
  @override
  void toggleOptimised() =>
      super.noSuchMethod(Invocation.method(#toggleOptimised, []),
          returnValueForMissingStub: null);
  @override
  bool ifOptimised() => (super.noSuchMethod(Invocation.method(#ifOptimised, []),
      returnValue: false) as bool);
  @override
  void setCostOptimised(bool? optimised) =>
      super.noSuchMethod(Invocation.method(#setCostOptimised, [optimised]),
          returnValueForMissingStub: null);
  @override
  void toggleCostOptimised() =>
      super.noSuchMethod(Invocation.method(#toggleCostOptimised, []),
          returnValueForMissingStub: null);
  @override
  bool ifCostOptimised() =>
      (super.noSuchMethod(Invocation.method(#ifCostOptimised, []),
          returnValue: false) as bool);
  @override
  _i4.Stop getStart() => (super.noSuchMethod(Invocation.method(#getStart, []),
      returnValue: _FakeStop_2()) as _i4.Stop);
  @override
  _i4.Stop getDestination() =>
      (super.noSuchMethod(Invocation.method(#getDestination, []),
          returnValue: _FakeStop_2()) as _i4.Stop);
  @override
  List<_i4.Stop> getWaypoints() =>
      (super.noSuchMethod(Invocation.method(#getWaypoints, []),
          returnValue: <_i4.Stop>[]) as List<_i4.Stop>);
  @override
  _i4.Stop getFirstWaypoint() =>
      (super.noSuchMethod(Invocation.method(#getFirstWaypoint, []),
          returnValue: _FakeStop_2()) as _i4.Stop);
  @override
  List<_i4.Stop> getStops() =>
      (super.noSuchMethod(Invocation.method(#getStops, []),
          returnValue: <_i4.Stop>[]) as List<_i4.Stop>);
  @override
  _i4.Stop getStop(int? id) =>
      (super.noSuchMethod(Invocation.method(#getStop, [id]),
          returnValue: _FakeStop_2()) as _i4.Stop);
  @override
  bool ifChanged() =>
      (super.noSuchMethod(Invocation.method(#ifChanged, []), returnValue: false)
          as bool);
  @override
  _i4.Stop getStopByIndex(int? index) =>
      (super.noSuchMethod(Invocation.method(#getStopByIndex, [index]),
          returnValue: _FakeStop_2()) as _i4.Stop);
  @override
  bool ifStartSet() => (super.noSuchMethod(Invocation.method(#ifStartSet, []),
      returnValue: false) as bool);
  @override
  bool ifDestinationSet() =>
      (super.noSuchMethod(Invocation.method(#ifDestinationSet, []),
          returnValue: false) as bool);
  @override
  bool ifFirstWaypointSet() =>
      (super.noSuchMethod(Invocation.method(#ifFirstWaypointSet, []),
          returnValue: false) as bool);
  @override
  bool ifWaypointsSet() =>
      (super.noSuchMethod(Invocation.method(#ifWaypointsSet, []),
          returnValue: false) as bool);
  @override
  void changeStart(_i9.Place? start) =>
      super.noSuchMethod(Invocation.method(#changeStart, [start]),
          returnValueForMissingStub: null);
  @override
  void changeDestination(_i9.Place? destination) =>
      super.noSuchMethod(Invocation.method(#changeDestination, [destination]),
          returnValueForMissingStub: null);
  @override
  void changeStop(int? id, _i9.Place? stop) =>
      super.noSuchMethod(Invocation.method(#changeStop, [id, stop]),
          returnValueForMissingStub: null);
  @override
  void swapStops(int? stop1ID, int? stop2ID) =>
      super.noSuchMethod(Invocation.method(#swapStops, [stop1ID, stop2ID]),
          returnValueForMissingStub: null);
  @override
  _i4.Stop addWaypoint(_i9.Place? waypoint) =>
      (super.noSuchMethod(Invocation.method(#addWaypoint, [waypoint]),
          returnValue: _FakeStop_2()) as _i4.Stop);
  @override
  _i4.Stop addCostWaypoint(_i9.Place? waypoint) =>
      (super.noSuchMethod(Invocation.method(#addCostWaypoint, [waypoint]),
          returnValue: _FakeStop_2()) as _i4.Stop);
  @override
  _i4.Stop addFirstWaypoint(_i9.Place? waypoint) =>
      (super.noSuchMethod(Invocation.method(#addFirstWaypoint, [waypoint]),
          returnValue: _FakeStop_2()) as _i4.Stop);
  @override
  void clearStart() => super.noSuchMethod(Invocation.method(#clearStart, []),
      returnValueForMissingStub: null);
  @override
  void clearDestination() =>
      super.noSuchMethod(Invocation.method(#clearDestination, []),
          returnValueForMissingStub: null);
  @override
  void clearStop(int? id) =>
      super.noSuchMethod(Invocation.method(#clearStop, [id]),
          returnValueForMissingStub: null);
  @override
  void clearFirstWaypoint() =>
      super.noSuchMethod(Invocation.method(#clearFirstWaypoint, []),
          returnValueForMissingStub: null);
  @override
  void removeStop(int? id) =>
      super.noSuchMethod(Invocation.method(#removeStop, [id]),
          returnValueForMissingStub: null);
  @override
  void removeWaypoints() =>
      super.noSuchMethod(Invocation.method(#removeWaypoints, []),
          returnValueForMissingStub: null);
  @override
  void clearPathwayMarkers() =>
      super.noSuchMethod(Invocation.method(#clearPathwayMarkers, []),
          returnValueForMissingStub: null);
  @override
  void clearChanged() =>
      super.noSuchMethod(Invocation.method(#clearChanged, []),
          returnValueForMissingStub: null);
  @override
  void clearRoutes() => super.noSuchMethod(Invocation.method(#clearRoutes, []),
      returnValueForMissingStub: null);
  @override
  void clear() => super.noSuchMethod(Invocation.method(#clear, []),
      returnValueForMissingStub: null);
  @override
  _i3.Route getStartWalkingRoute() =>
      (super.noSuchMethod(Invocation.method(#getStartWalkingRoute, []),
          returnValue: _FakeRoute_1()) as _i3.Route);
  @override
  _i3.Route getBikingRoute() =>
      (super.noSuchMethod(Invocation.method(#getBikingRoute, []),
          returnValue: _FakeRoute_1()) as _i3.Route);
  @override
  _i3.Route getEndWalkingRoute() =>
      (super.noSuchMethod(Invocation.method(#getEndWalkingRoute, []),
          returnValue: _FakeRoute_1()) as _i3.Route);
  @override
  bool getCostOptimised() =>
      (super.noSuchMethod(Invocation.method(#getCostOptimised, []),
          returnValue: false) as bool);
  @override
  bool getLoading() => (super.noSuchMethod(Invocation.method(#getLoading, []),
      returnValue: false) as bool);
}

/// A class which mocks [MarkerManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockMarkerManager extends _i1.Mock implements _i14.MarkerManager {
  MockMarkerManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set userMarkerIcon(_i5.BitmapDescriptor? _userMarkerIcon) =>
      super.noSuchMethod(Invocation.setter(#userMarkerIcon, _userMarkerIcon),
          returnValueForMissingStub: null);
  @override
  _i10.Stream<Set<_i5.Marker>> get mapMarkerStream =>
      (super.noSuchMethod(Invocation.getter(#mapMarkerStream),
              returnValue: Stream<Set<_i5.Marker>>.empty())
          as _i10.Stream<Set<_i5.Marker>>);
  @override
  void setMarker(_i5.LatLng? point, String? markerID, [double? color = 0.0]) =>
      super.noSuchMethod(
          Invocation.method(#setMarker, [point, markerID, color]),
          returnValueForMissingStub: null);
  @override
  void removeMarker(String? markerID) =>
      super.noSuchMethod(Invocation.method(#removeMarker, [markerID]),
          returnValueForMissingStub: null);
  @override
  Set<_i5.Marker> getMarkers() =>
      (super.noSuchMethod(Invocation.method(#getMarkers, []),
          returnValue: <_i5.Marker>{}) as Set<_i5.Marker>);
  @override
  _i5.Marker getUserMarker() =>
      (super.noSuchMethod(Invocation.method(#getUserMarker, []),
          returnValue: _FakeMarker_3()) as _i5.Marker);
  @override
  void clearMarker(int? uid) =>
      super.noSuchMethod(Invocation.method(#clearMarker, [uid]),
          returnValueForMissingStub: null);
  @override
  void setPlaceMarker(_i9.Place? place, [int? uid = -1]) =>
      super.noSuchMethod(Invocation.method(#setPlaceMarker, [place, uid]),
          returnValueForMissingStub: null);
  @override
  void setStationMarkerWithUID(
          _i7.Station? station, _i15.ApplicationBloc? appBloc,
          [int? uid = -1]) =>
      super.noSuchMethod(
          Invocation.method(#setStationMarkerWithUID, [station, appBloc, uid]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<_i5.Marker> setUserMarker(_i5.LatLng? point) =>
      (super.noSuchMethod(Invocation.method(#setUserMarker, [point]),
              returnValue: Future<_i5.Marker>.value(_FakeMarker_3()))
          as _i10.Future<_i5.Marker>);
  @override
  void setStationMarker(_i7.Station? station, _i15.ApplicationBloc? appBloc) =>
      super.noSuchMethod(
          Invocation.method(#setStationMarker, [station, appBloc]),
          returnValueForMissingStub: null);
  @override
  void setStationMarkers(
          List<_i7.Station>? stations, _i15.ApplicationBloc? appBloc) =>
      super.noSuchMethod(
          Invocation.method(#setStationMarkers, [stations, appBloc]),
          returnValueForMissingStub: null);
  @override
  void clearStationMarkers(List<_i7.Station>? stations) =>
      super.noSuchMethod(Invocation.method(#clearStationMarkers, [stations]),
          returnValueForMissingStub: null);
}

/// A class which mocks [ApplicationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockApplicationBloc extends _i1.Mock implements _i15.ApplicationBloc {
  MockApplicationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Widget get selectedScreen =>
      (super.noSuchMethod(Invocation.getter(#selectedScreen),
          returnValue: _FakeWidget_4()) as _i6.Widget);
  @override
  set selectedScreen(_i6.Widget? _selectedScreen) =>
      super.noSuchMethod(Invocation.setter(#selectedScreen, _selectedScreen),
          returnValueForMissingStub: null);
  @override
  Map<String, _i6.Widget> get screens =>
      (super.noSuchMethod(Invocation.getter(#screens),
          returnValue: <String, _i6.Widget>{}) as Map<String, _i6.Widget>);
  @override
  List<_i16.PlaceSearch> get searchResults =>
      (super.noSuchMethod(Invocation.getter(#searchResults),
          returnValue: <_i16.PlaceSearch>[]) as List<_i16.PlaceSearch>);
  @override
  set searchResults(List<_i16.PlaceSearch>? _searchResults) =>
      super.noSuchMethod(Invocation.setter(#searchResults, _searchResults),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i10.Future<void> updateGroupSize(int? groupSize) => (super.noSuchMethod(
      Invocation.method(#updateGroupSize, [groupSize]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  void showBinaryDialog() =>
      super.noSuchMethod(Invocation.method(#showBinaryDialog, []),
          returnValueForMissingStub: null);
  @override
  void showSelectedStationDialog(_i7.Station? station) => super.noSuchMethod(
      Invocation.method(#showSelectedStationDialog, [station]),
      returnValueForMissingStub: null);
  @override
  void clearBinaryDialog() =>
      super.noSuchMethod(Invocation.method(#clearBinaryDialog, []),
          returnValueForMissingStub: null);
  @override
  void clearSelectedStationDialog() =>
      super.noSuchMethod(Invocation.method(#clearSelectedStationDialog, []),
          returnValueForMissingStub: null);
  @override
  List<_i16.PlaceSearch> getSearchResult() =>
      (super.noSuchMethod(Invocation.method(#getSearchResult, []),
          returnValue: <_i16.PlaceSearch>[]) as List<_i16.PlaceSearch>);
  @override
  bool ifSearchResult() =>
      (super.noSuchMethod(Invocation.method(#ifSearchResult, []),
          returnValue: false) as bool);
  @override
  dynamic searchPlaces(String? searchTerm) =>
      super.noSuchMethod(Invocation.method(#searchPlaces, [searchTerm]));
  @override
  dynamic searchSelectedStation(_i7.Station? station, int? uid) => super
      .noSuchMethod(Invocation.method(#searchSelectedStation, [station, uid]));
  @override
  dynamic setSelectedSearch(int? searchIndex, int? uid) => super
      .noSuchMethod(Invocation.method(#setSelectedSearch, [searchIndex, uid]));
  @override
  _i10.Future<void> updateLocationLive() => (super.noSuchMethod(
      Invocation.method(#updateLocationLive, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  dynamic setLocationMarker(_i9.Place? place, [int? uid = -1]) =>
      super.noSuchMethod(Invocation.method(#setLocationMarker, [place, uid]));
  @override
  dynamic setSelectedLocation(_i9.Place? stop, int? uid) =>
      super.noSuchMethod(Invocation.method(#setSelectedLocation, [stop, uid]));
  @override
  dynamic clearLocationMarker(int? uid) =>
      super.noSuchMethod(Invocation.method(#clearLocationMarker, [uid]));
  @override
  dynamic clearSelectedLocation(int? uid) =>
      super.noSuchMethod(Invocation.method(#clearSelectedLocation, [uid]));
  @override
  dynamic removeSelectedLocation(int? uid) =>
      super.noSuchMethod(Invocation.method(#removeSelectedLocation, [uid]));
  @override
  _i10.Future<_i7.Station> getStartStation(_i9.Place? origin,
          [int? groupSize = 1]) =>
      (super.noSuchMethod(
              Invocation.method(#getStartStation, [origin, groupSize]),
              returnValue: Future<_i7.Station>.value(_FakeStation_5()))
          as _i10.Future<_i7.Station>);
  @override
  _i10.Future<_i7.Station> getEndStation(_i9.Place? destination,
          [int? groupSize = 1]) =>
      (super.noSuchMethod(
              Invocation.method(#getEndStation, [destination, groupSize]),
              returnValue: Future<_i7.Station>.value(_FakeStation_5()))
          as _i10.Future<_i7.Station>);
  @override
  dynamic setRoutes(_i9.Place? origin, _i9.Place? destination,
          _i7.Station? startStation, _i7.Station? endStation,
          [List<_i9.Place>? intermediates = const [], int? groupSize = 1]) =>
      super.noSuchMethod(Invocation.method(#setRoutes, [
        origin,
        destination,
        startStation,
        endStation,
        intermediates,
        groupSize
      ]));
  @override
  dynamic findRoute(_i9.Place? origin, _i9.Place? destination,
          [List<_i9.Place>? intermediates = const [], int? groupSize = 1]) =>
      super.noSuchMethod(Invocation.method(
          #findRoute, [origin, destination, intermediates, groupSize]));
  @override
  _i10.Future<int> getDurationFromToStation(
          _i7.Station? startStation, _i7.Station? endStation) =>
      (super.noSuchMethod(
          Invocation.method(
              #getDurationFromToStation, [startStation, endStation]),
          returnValue: Future<int>.value(0)) as _i10.Future<int>);
  @override
  double costEfficiencyHeuristic(_i7.Station? curStation,
          _i7.Station? intermediaryStation, _i7.Station? endStation) =>
      (super.noSuchMethod(
          Invocation.method(#costEfficiencyHeuristic,
              [curStation, intermediaryStation, endStation]),
          returnValue: 0.0) as double);
  @override
  _i10.Future<void> findCostEfficientRoute(
          _i9.Place? origin, _i9.Place? destination, [int? groupSize = 1]) =>
      (super.noSuchMethod(
              Invocation.method(
                  #findCostEfficientRoute, [origin, destination, groupSize]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  void endRoute() => super.noSuchMethod(Invocation.method(#endRoute, []),
      returnValueForMissingStub: null);
  @override
  void setNavigationSubscription() =>
      super.noSuchMethod(Invocation.method(#setNavigationSubscription, []),
          returnValueForMissingStub: null);
  @override
  _i10.Future<void> filterStationMarkers() => (super.noSuchMethod(
      Invocation.method(#filterStationMarkers, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  dynamic viewStationMarker(_i7.Station? station, [int? uid = -1]) =>
      super.noSuchMethod(Invocation.method(#viewStationMarker, [station, uid]));
  @override
  _i6.Widget getSelectedScreen() =>
      (super.noSuchMethod(Invocation.method(#getSelectedScreen, []),
          returnValue: _FakeWidget_4()) as _i6.Widget);
  @override
  void setSelectedScreen(String? screenName) =>
      super.noSuchMethod(Invocation.method(#setSelectedScreen, [screenName]),
          returnValueForMissingStub: null);
  @override
  void goBack(String? backTo) =>
      super.noSuchMethod(Invocation.method(#goBack, [backTo]),
          returnValueForMissingStub: null);
  @override
  _i10.Future<void> startNavigation() => (super.noSuchMethod(
      Invocation.method(#startNavigation, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> setPartialRoutes(
          [List<String>? first = const [],
          List<String>? intermediates = const []]) =>
      (super.noSuchMethod(
              Invocation.method(#setPartialRoutes, [first, intermediates]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  bool isUserLogged() =>
      (super.noSuchMethod(Invocation.method(#isUserLogged, []),
          returnValue: false) as bool);
  @override
  void clearMap() => super.noSuchMethod(Invocation.method(#clearMap, []),
      returnValueForMissingStub: null);
  @override
  void changeUnits() => super.noSuchMethod(Invocation.method(#changeUnits, []),
      returnValueForMissingStub: null);
  @override
  void updateSettings() =>
      super.noSuchMethod(Invocation.method(#updateSettings, []),
          returnValueForMissingStub: null);
  @override
  void notifyListeningWidgets() =>
      super.noSuchMethod(Invocation.method(#notifyListeningWidgets, []),
          returnValueForMissingStub: null);
  @override
  void addListener(_i17.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i17.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
