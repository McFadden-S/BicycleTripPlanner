// Mocks generated by Mockito 5.1.0 from annotations
// in bicycle_trip_planner/test/bloc/application_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:bicycle_trip_planner/managers/LocationManager.dart' as _i4;
import 'package:bicycle_trip_planner/models/distance_types.dart' as _i7;
import 'package:bicycle_trip_planner/models/place.dart' as _i3;
import 'package:bicycle_trip_planner/models/place_search.dart' as _i10;
import 'package:bicycle_trip_planner/services/places_service.dart' as _i9;
import 'package:geolocator/geolocator.dart' as _i5;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i2;
import 'package:location/location.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLatLng_0 extends _i1.Fake implements _i2.LatLng {}

class _FakePlace_1 extends _i1.Fake implements _i3.Place {}

/// A class which mocks [LocationManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationManager extends _i1.Mock implements _i4.LocationManager {
  MockLocationManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void isTest(_i5.Geolocator? geolocator) =>
      super.noSuchMethod(Invocation.method(#isTest, [geolocator]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<_i2.LatLng> locate() =>
      (super.noSuchMethod(Invocation.method(#locate, []),
              returnValue: Future<_i2.LatLng>.value(_FakeLatLng_0()))
          as _i6.Future<_i2.LatLng>);
  @override
  _i6.Future<bool> requestPermission() =>
      (super.noSuchMethod(Invocation.method(#requestPermission, []),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<void> openLocationSettingsOnDevice() =>
      (super.noSuchMethod(Invocation.method(#openLocationSettingsOnDevice, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<double> distanceTo(_i2.LatLng? pos) =>
      (super.noSuchMethod(Invocation.method(#distanceTo, [pos]),
          returnValue: Future<double>.value(0.0)) as _i6.Future<double>);
  @override
  double distanceFromTo(_i2.LatLng? posFrom, _i2.LatLng? posTo) =>
      (super.noSuchMethod(Invocation.method(#distanceFromTo, [posFrom, posTo]),
          returnValue: 0.0) as double);
  @override
  double distanceFromToInMeters(_i2.LatLng? posFrom, _i2.LatLng? posTo) =>
      (super.noSuchMethod(
          Invocation.method(#distanceFromToInMeters, [posFrom, posTo]),
          returnValue: 0.0) as double);
  @override
  void setCurrentLocation(_i3.Place? currentPlace) =>
      super.noSuchMethod(Invocation.method(#setCurrentLocation, [currentPlace]),
          returnValueForMissingStub: null);
  @override
  _i3.Place getCurrentLocation() =>
      (super.noSuchMethod(Invocation.method(#getCurrentLocation, []),
          returnValue: _FakePlace_1()) as _i3.Place);
  @override
  _i7.DistanceType getUnits() =>
      (super.noSuchMethod(Invocation.method(#getUnits, []),
          returnValue: _i7.DistanceType.miles) as _i7.DistanceType);
  @override
  _i6.Stream<_i8.LocationData> onUserLocationChange(
          [double? distanceFilter = 0.0]) =>
      (super.noSuchMethod(
              Invocation.method(#onUserLocationChange, [distanceFilter]),
              returnValue: Stream<_i8.LocationData>.empty())
          as _i6.Stream<_i8.LocationData>);
  @override
  void setUnits(_i7.DistanceType? units) =>
      super.noSuchMethod(Invocation.method(#setUnits, [units]),
          returnValueForMissingStub: null);
}

/// A class which mocks [PlacesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlacesService extends _i1.Mock implements _i9.PlacesService {
  MockPlacesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get key =>
      (super.noSuchMethod(Invocation.getter(#key), returnValue: '') as String);
  @override
  set key(String? _key) => super.noSuchMethod(Invocation.setter(#key, _key),
      returnValueForMissingStub: null);
  @override
  String get prefixUrl =>
      (super.noSuchMethod(Invocation.getter(#prefixUrl), returnValue: '')
          as String);
  @override
  _i6.Future<List<_i10.PlaceSearch>> getAutocomplete(String? search) =>
      (super.noSuchMethod(Invocation.method(#getAutocomplete, [search]),
              returnValue:
                  Future<List<_i10.PlaceSearch>>.value(<_i10.PlaceSearch>[]))
          as _i6.Future<List<_i10.PlaceSearch>>);
  @override
  _i6.Future<_i3.Place> getPlace(String? placeId, String? description) =>
      (super.noSuchMethod(Invocation.method(#getPlace, [placeId, description]),
              returnValue: Future<_i3.Place>.value(_FakePlace_1()))
          as _i6.Future<_i3.Place>);
  @override
  _i6.Future<_i3.Place> getPlaceFromCoordinates(
          double? lat, double? lng, String? description) =>
      (super.noSuchMethod(
          Invocation.method(#getPlaceFromCoordinates, [lat, lng, description]),
          returnValue:
              Future<_i3.Place>.value(_FakePlace_1())) as _i6
          .Future<_i3.Place>);
  @override
  _i6.Future<_i3.Place> getPlaceFromAddress(
          String? address, String? description) =>
      (super.noSuchMethod(
              Invocation.method(#getPlaceFromAddress, [address, description]),
              returnValue: Future<_i3.Place>.value(_FakePlace_1()))
          as _i6.Future<_i3.Place>);
}
