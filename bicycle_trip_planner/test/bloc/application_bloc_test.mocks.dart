// Mocks generated by Mockito 5.1.0 from annotations
// in bicycle_trip_planner/test/bloc/application_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:bicycle_trip_planner/managers/LocationManager.dart' as _i6;
import 'package:bicycle_trip_planner/managers/StationManager.dart' as _i14;
import 'package:bicycle_trip_planner/models/distance_types.dart' as _i9;
import 'package:bicycle_trip_planner/models/place.dart' as _i3;
import 'package:bicycle_trip_planner/models/place_search.dart' as _i12;
import 'package:bicycle_trip_planner/models/route.dart' as _i4;
import 'package:bicycle_trip_planner/models/station.dart' as _i5;
import 'package:bicycle_trip_planner/services/directions_service.dart' as _i13;
import 'package:bicycle_trip_planner/services/places_service.dart' as _i11;
import 'package:geolocator/geolocator.dart' as _i10;
import 'package:google_maps_flutter/google_maps_flutter.dart' as _i2;
import 'package:location/location.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLatLng_0 extends _i1.Fake implements _i2.LatLng {}

class _FakePlace_1 extends _i1.Fake implements _i3.Place {}

class _FakeRoute_2 extends _i1.Fake implements _i4.Route {}

class _FakeStation_3 extends _i1.Fake implements _i5.Station {}

/// A class which mocks [LocationManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationManager extends _i1.Mock implements _i6.LocationManager {
  MockLocationManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.LatLng> locate() =>
      (super.noSuchMethod(Invocation.method(#locate, []),
              returnValue: Future<_i2.LatLng>.value(_FakeLatLng_0()))
          as _i7.Future<_i2.LatLng>);
  @override
  _i7.Future<_i8.PermissionStatus> requestPermission() => (super.noSuchMethod(
          Invocation.method(#requestPermission, []),
          returnValue:
              Future<_i8.PermissionStatus>.value(_i8.PermissionStatus.granted))
      as _i7.Future<_i8.PermissionStatus>);
  @override
  _i7.Future<bool> checkServiceEnabled() =>
      (super.noSuchMethod(Invocation.method(#checkServiceEnabled, []),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<bool> checkPermission() =>
      (super.noSuchMethod(Invocation.method(#checkPermission, []),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<double> distanceTo(_i2.LatLng? pos) =>
      (super.noSuchMethod(Invocation.method(#distanceTo, [pos]),
          returnValue: Future<double>.value(0.0)) as _i7.Future<double>);
  @override
  double distanceFromTo(_i2.LatLng? posFrom, _i2.LatLng? posTo) =>
      (super.noSuchMethod(Invocation.method(#distanceFromTo, [posFrom, posTo]),
          returnValue: 0.0) as double);
  @override
  double distanceFromToInMeters(_i2.LatLng? posFrom, _i2.LatLng? posTo) =>
      (super.noSuchMethod(
          Invocation.method(#distanceFromToInMeters, [posFrom, posTo]),
          returnValue: 0.0) as double);
  @override
  _i7.Future<bool> locationSettings([double? distanceFilter = 0.0]) => (super
      .noSuchMethod(Invocation.method(#locationSettings, [distanceFilter]),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  void setCurrentLocation(_i3.Place? currentPlace) =>
      super.noSuchMethod(Invocation.method(#setCurrentLocation, [currentPlace]),
          returnValueForMissingStub: null);
  @override
  _i3.Place getCurrentLocation() =>
      (super.noSuchMethod(Invocation.method(#getCurrentLocation, []),
          returnValue: _FakePlace_1()) as _i3.Place);
  @override
  _i9.DistanceType getUnits() =>
      (super.noSuchMethod(Invocation.method(#getUnits, []),
          returnValue: _i9.DistanceType.miles) as _i9.DistanceType);
  @override
  _i7.Stream<_i8.LocationData> onUserLocationChange(
          [double? distanceFilter = 0.0]) =>
      (super.noSuchMethod(
              Invocation.method(#onUserLocationChange, [distanceFilter]),
              returnValue: Stream<_i8.LocationData>.empty())
          as _i7.Stream<_i8.LocationData>);
  @override
  void setUnits(_i9.DistanceType? units) =>
      super.noSuchMethod(Invocation.method(#setUnits, [units]),
          returnValueForMissingStub: null);
  @override
  void isTest(_i10.Geolocator? geolocator) =>
      super.noSuchMethod(Invocation.method(#isTest, [geolocator]),
          returnValueForMissingStub: null);
}

/// A class which mocks [PlacesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlacesService extends _i1.Mock implements _i11.PlacesService {
  MockPlacesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i12.PlaceSearch>> getAutocomplete(String? search) =>
      (super.noSuchMethod(Invocation.method(#getAutocomplete, [search]),
              returnValue:
                  Future<List<_i12.PlaceSearch>>.value(<_i12.PlaceSearch>[]))
          as _i7.Future<List<_i12.PlaceSearch>>);
  @override
  _i7.Future<_i3.Place> getPlace(String? placeId, String? description) =>
      (super.noSuchMethod(Invocation.method(#getPlace, [placeId, description]),
              returnValue: Future<_i3.Place>.value(_FakePlace_1()))
          as _i7.Future<_i3.Place>);
  @override
  _i7.Future<_i3.Place> getPlaceFromCoordinates(
          double? lat, double? lng, String? description) =>
      (super.noSuchMethod(
          Invocation.method(#getPlaceFromCoordinates, [lat, lng, description]),
          returnValue:
              Future<_i3.Place>.value(_FakePlace_1())) as _i7
          .Future<_i3.Place>);
  @override
  _i7.Future<_i3.Place> getPlaceFromAddress(
          String? address, String? description) =>
      (super.noSuchMethod(
              Invocation.method(#getPlaceFromAddress, [address, description]),
              returnValue: Future<_i3.Place>.value(_FakePlace_1()))
          as _i7.Future<_i3.Place>);
}

/// A class which mocks [DirectionsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectionsService extends _i1.Mock implements _i13.DirectionsService {
  MockDirectionsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Route> getRoutes(String? origin, String? destination,
          [List<String>? intermediates = const [], bool? optimised = true]) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getRoutes, [origin, destination, intermediates, optimised]),
              returnValue: Future<_i4.Route>.value(_FakeRoute_2()))
          as _i7.Future<_i4.Route>);
  @override
  _i7.Future<_i4.Route> getWalkingRoutes(String? origin, String? destination,
          [List<String>? intermediates = const [], bool? optimised = true]) =>
      (super.noSuchMethod(
              Invocation.method(#getWalkingRoutes,
                  [origin, destination, intermediates, optimised]),
              returnValue: Future<_i4.Route>.value(_FakeRoute_2()))
          as _i7.Future<_i4.Route>);
}

/// A class which mocks [StationManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockStationManager extends _i1.Mock implements _i14.StationManager {
  MockStationManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int getNumberOfStations() =>
      (super.noSuchMethod(Invocation.method(#getNumberOfStations, []),
          returnValue: 0) as int);
  @override
  List<_i5.Station> getStations() =>
      (super.noSuchMethod(Invocation.method(#getStations, []),
          returnValue: <_i5.Station>[]) as List<_i5.Station>);
  @override
  _i5.Station getStationByIndex(int? stationIndex) =>
      (super.noSuchMethod(Invocation.method(#getStationByIndex, [stationIndex]),
          returnValue: _FakeStation_3()) as _i5.Station);
  @override
  _i5.Station getStationById(int? stationId) =>
      (super.noSuchMethod(Invocation.method(#getStationById, [stationId]),
          returnValue: _FakeStation_3()) as _i5.Station);
  @override
  _i5.Station getStationByName(String? stationName) =>
      (super.noSuchMethod(Invocation.method(#getStationByName, [stationName]),
          returnValue: _FakeStation_3()) as _i5.Station);
  @override
  _i7.Future<_i5.Station> getPickupStationNear(_i2.LatLng? pos,
          [int? groupSize = 1]) =>
      (super.noSuchMethod(
              Invocation.method(#getPickupStationNear, [pos, groupSize]),
              returnValue: Future<_i5.Station>.value(_FakeStation_3()))
          as _i7.Future<_i5.Station>);
  @override
  _i7.Future<_i5.Station> getDropoffStationNear(_i2.LatLng? pos,
          [int? groupSize = 1]) =>
      (super.noSuchMethod(
              Invocation.method(#getDropoffStationNear, [pos, groupSize]),
              returnValue: Future<_i5.Station>.value(_FakeStation_3()))
          as _i7.Future<_i5.Station>);
  @override
  List<_i5.Station> getStationsWithAtLeastXBikes(
          int? bikes, List<_i5.Station>? filteredStations) =>
      (super.noSuchMethod(
          Invocation.method(
              #getStationsWithAtLeastXBikes, [bikes, filteredStations]),
          returnValue: <_i5.Station>[]) as List<_i5.Station>);
  @override
  List<_i5.Station> getStationsWithNoBikes(
          List<_i5.Station>? filteredStations) =>
      (super.noSuchMethod(
          Invocation.method(#getStationsWithNoBikes, [filteredStations]),
          returnValue: <_i5.Station>[]) as List<_i5.Station>);
  @override
  List<_i5.Station> getFarStations(double? range) =>
      (super.noSuchMethod(Invocation.method(#getFarStations, [range]),
          returnValue: <_i5.Station>[]) as List<_i5.Station>);
  @override
  List<_i5.Station> getNearStations(double? range) =>
      (super.noSuchMethod(Invocation.method(#getNearStations, [range]),
          returnValue: <_i5.Station>[]) as List<_i5.Station>);
  @override
  _i7.Future<void> setStations(List<_i5.Station>? newStations,
          {dynamic clear = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setStations, [newStations], {#clear: clear}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
}
